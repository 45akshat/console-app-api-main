"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = __importDefault(require("fs/promises"));
const index_1 = __importDefault(require("../index"));
const path_1 = __importDefault(require("path"));
// Load test emails from file
const filePath = path_1.default.join(__dirname, './testEmails.txt');
function loadTestEmails(filePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const rawData = yield promises_1.default.readFile(filePath);
        return rawData.toString().trim().split('\n');
    });
}
function runTests() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const testEmails = yield loadTestEmails(filePath);
            for (const email of testEmails) {
                const isDisposable = yield (0, index_1.default)(email);
                console.log(email, '- Disposable:', isDisposable);
            }
            console.log('Test passed.');
        }
        catch (error) {
            console.error('Unexpected error:', error);
            console.error('Please check the file path and try again.');
            console.error('Test failed.');
        }
    });
}
runTests();
